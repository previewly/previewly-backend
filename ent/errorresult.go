// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wsw/backend/ent/errorresult"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ErrorResult is the model entity for the ErrorResult schema.
type ErrorResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Message holds the value of the "message" field.
	Message         *string `json:"message,omitempty"`
	url_errorresult *int
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ErrorResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case errorresult.FieldID:
			values[i] = new(sql.NullInt64)
		case errorresult.FieldMessage:
			values[i] = new(sql.NullString)
		case errorresult.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case errorresult.ForeignKeys[0]: // url_errorresult
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ErrorResult fields.
func (er *ErrorResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case errorresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case errorresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				er.CreatedAt = value.Time
			}
		case errorresult.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				er.Message = new(string)
				*er.Message = value.String
			}
		case errorresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field url_errorresult", value)
			} else if value.Valid {
				er.url_errorresult = new(int)
				*er.url_errorresult = int(value.Int64)
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ErrorResult.
// This includes values selected through modifiers, order, etc.
func (er *ErrorResult) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// Update returns a builder for updating this ErrorResult.
// Note that you need to call ErrorResult.Unwrap() before calling this method if this ErrorResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *ErrorResult) Update() *ErrorResultUpdateOne {
	return NewErrorResultClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the ErrorResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *ErrorResult) Unwrap() *ErrorResult {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: ErrorResult is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *ErrorResult) String() string {
	var builder strings.Builder
	builder.WriteString("ErrorResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("created_at=")
	builder.WriteString(er.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := er.Message; v != nil {
		builder.WriteString("message=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ErrorResults is a parsable slice of ErrorResult.
type ErrorResults []*ErrorResult
