// Code generated by ent, DO NOT EDIT.

package image

import (
	"wsw/backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldID, id))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFilename, v))
}

// DestinationPath applies equality check predicate on the "destination_path" field. It's identical to DestinationPathEQ.
func DestinationPath(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDestinationPath, v))
}

// OriginalFilename applies equality check predicate on the "original_filename" field. It's identical to OriginalFilenameEQ.
func OriginalFilename(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalFilename, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldType, v))
}

// ExtraValue applies equality check predicate on the "extra_value" field. It's identical to ExtraValueEQ.
func ExtraValue(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldExtraValue, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldFilename, v))
}

// DestinationPathEQ applies the EQ predicate on the "destination_path" field.
func DestinationPathEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDestinationPath, v))
}

// DestinationPathNEQ applies the NEQ predicate on the "destination_path" field.
func DestinationPathNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldDestinationPath, v))
}

// DestinationPathIn applies the In predicate on the "destination_path" field.
func DestinationPathIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldDestinationPath, vs...))
}

// DestinationPathNotIn applies the NotIn predicate on the "destination_path" field.
func DestinationPathNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldDestinationPath, vs...))
}

// DestinationPathGT applies the GT predicate on the "destination_path" field.
func DestinationPathGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldDestinationPath, v))
}

// DestinationPathGTE applies the GTE predicate on the "destination_path" field.
func DestinationPathGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldDestinationPath, v))
}

// DestinationPathLT applies the LT predicate on the "destination_path" field.
func DestinationPathLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldDestinationPath, v))
}

// DestinationPathLTE applies the LTE predicate on the "destination_path" field.
func DestinationPathLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldDestinationPath, v))
}

// DestinationPathContains applies the Contains predicate on the "destination_path" field.
func DestinationPathContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldDestinationPath, v))
}

// DestinationPathHasPrefix applies the HasPrefix predicate on the "destination_path" field.
func DestinationPathHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldDestinationPath, v))
}

// DestinationPathHasSuffix applies the HasSuffix predicate on the "destination_path" field.
func DestinationPathHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldDestinationPath, v))
}

// DestinationPathEqualFold applies the EqualFold predicate on the "destination_path" field.
func DestinationPathEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldDestinationPath, v))
}

// DestinationPathContainsFold applies the ContainsFold predicate on the "destination_path" field.
func DestinationPathContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldDestinationPath, v))
}

// OriginalFilenameEQ applies the EQ predicate on the "original_filename" field.
func OriginalFilenameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalFilename, v))
}

// OriginalFilenameNEQ applies the NEQ predicate on the "original_filename" field.
func OriginalFilenameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldOriginalFilename, v))
}

// OriginalFilenameIn applies the In predicate on the "original_filename" field.
func OriginalFilenameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameNotIn applies the NotIn predicate on the "original_filename" field.
func OriginalFilenameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameGT applies the GT predicate on the "original_filename" field.
func OriginalFilenameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldOriginalFilename, v))
}

// OriginalFilenameGTE applies the GTE predicate on the "original_filename" field.
func OriginalFilenameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldOriginalFilename, v))
}

// OriginalFilenameLT applies the LT predicate on the "original_filename" field.
func OriginalFilenameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldOriginalFilename, v))
}

// OriginalFilenameLTE applies the LTE predicate on the "original_filename" field.
func OriginalFilenameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldOriginalFilename, v))
}

// OriginalFilenameContains applies the Contains predicate on the "original_filename" field.
func OriginalFilenameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldOriginalFilename, v))
}

// OriginalFilenameHasPrefix applies the HasPrefix predicate on the "original_filename" field.
func OriginalFilenameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldOriginalFilename, v))
}

// OriginalFilenameHasSuffix applies the HasSuffix predicate on the "original_filename" field.
func OriginalFilenameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldOriginalFilename, v))
}

// OriginalFilenameEqualFold applies the EqualFold predicate on the "original_filename" field.
func OriginalFilenameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldOriginalFilename, v))
}

// OriginalFilenameContainsFold applies the ContainsFold predicate on the "original_filename" field.
func OriginalFilenameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldOriginalFilename, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldType, v))
}

// ExtraValueEQ applies the EQ predicate on the "extra_value" field.
func ExtraValueEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldExtraValue, v))
}

// ExtraValueNEQ applies the NEQ predicate on the "extra_value" field.
func ExtraValueNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldExtraValue, v))
}

// ExtraValueIn applies the In predicate on the "extra_value" field.
func ExtraValueIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldExtraValue, vs...))
}

// ExtraValueNotIn applies the NotIn predicate on the "extra_value" field.
func ExtraValueNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldExtraValue, vs...))
}

// ExtraValueGT applies the GT predicate on the "extra_value" field.
func ExtraValueGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldExtraValue, v))
}

// ExtraValueGTE applies the GTE predicate on the "extra_value" field.
func ExtraValueGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldExtraValue, v))
}

// ExtraValueLT applies the LT predicate on the "extra_value" field.
func ExtraValueLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldExtraValue, v))
}

// ExtraValueLTE applies the LTE predicate on the "extra_value" field.
func ExtraValueLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldExtraValue, v))
}

// ExtraValueContains applies the Contains predicate on the "extra_value" field.
func ExtraValueContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldExtraValue, v))
}

// ExtraValueHasPrefix applies the HasPrefix predicate on the "extra_value" field.
func ExtraValueHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldExtraValue, v))
}

// ExtraValueHasSuffix applies the HasSuffix predicate on the "extra_value" field.
func ExtraValueHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldExtraValue, v))
}

// ExtraValueIsNil applies the IsNil predicate on the "extra_value" field.
func ExtraValueIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldExtraValue))
}

// ExtraValueNotNil applies the NotNil predicate on the "extra_value" field.
func ExtraValueNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldExtraValue))
}

// ExtraValueEqualFold applies the EqualFold predicate on the "extra_value" field.
func ExtraValueEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldExtraValue, v))
}

// ExtraValueContainsFold applies the ContainsFold predicate on the "extra_value" field.
func ExtraValueContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldExtraValue, v))
}

// HasImageprocess applies the HasEdge predicate on the "imageprocess" edge.
func HasImageprocess() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImageprocessTable, ImageprocessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageprocessWith applies the HasEdge predicate on the "imageprocess" edge with a given conditions (other predicates).
func HasImageprocessWith(preds ...predicate.ImageProcess) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newImageprocessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Image) predicate.Image {
	return predicate.Image(sql.NotPredicates(p))
}
