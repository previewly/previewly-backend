// Code generated by ent, DO NOT EDIT.

package imageprocess

import (
	"fmt"
	"time"
	"wsw/backend/ent/types"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the imageprocess type in the database.
	Label = "image_process"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProcessHash holds the string denoting the process_hash field in the database.
	FieldProcessHash = "process_hash"
	// FieldProcesses holds the string denoting the processes field in the database.
	FieldProcesses = "processes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPathPrefix holds the string denoting the path_prefix field in the database.
	FieldPathPrefix = "path_prefix"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeUploadimage holds the string denoting the uploadimage edge name in mutations.
	EdgeUploadimage = "uploadimage"
	// Table holds the table name of the imageprocess in the database.
	Table = "image_processes"
	// UploadimageTable is the table that holds the uploadimage relation/edge.
	UploadimageTable = "image_processes"
	// UploadimageInverseTable is the table name for the UploadImage entity.
	// It exists in this package in order to avoid circular dependency with the "uploadimage" package.
	UploadimageInverseTable = "upload_images"
	// UploadimageColumn is the table column denoting the uploadimage relation/edge.
	UploadimageColumn = "upload_image_imageprocess"
)

// Columns holds all SQL columns for imageprocess fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldProcessHash,
	FieldProcesses,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPathPrefix,
	FieldError,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "image_processes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"upload_image_imageprocess",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s types.StatusEnum) error {
	switch s {
	case "success", "error", "pending":
		return nil
	default:
		return fmt.Errorf("imageprocess: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ImageProcess queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProcessHash orders the results by the process_hash field.
func ByProcessHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessHash, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPathPrefix orders the results by the path_prefix field.
func ByPathPrefix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathPrefix, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByUploadimageField orders the results by uploadimage field.
func ByUploadimageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadimageStep(), sql.OrderByField(field, opts...))
	}
}
func newUploadimageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadimageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploadimageTable, UploadimageColumn),
	)
}
