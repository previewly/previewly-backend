// Code generated by ent, DO NOT EDIT.

package imageprocess

import (
	"time"
	"wsw/backend/ent/predicate"
	"wsw/backend/ent/types"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v types.StatusEnum) predicate.ImageProcess {
	vc := v
	return predicate.ImageProcess(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v types.StatusEnum) predicate.ImageProcess {
	vc := v
	return predicate.ImageProcess(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...types.StatusEnum) predicate.ImageProcess {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImageProcess(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...types.StatusEnum) predicate.ImageProcess {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImageProcess(sql.FieldNotIn(FieldStatus, v...))
}

// ProcessEQ applies the EQ predicate on the "process" field.
func ProcessEQ(v types.ImageProcess) predicate.ImageProcess {
	vc := v
	return predicate.ImageProcess(sql.FieldEQ(FieldProcess, vc))
}

// ProcessNEQ applies the NEQ predicate on the "process" field.
func ProcessNEQ(v types.ImageProcess) predicate.ImageProcess {
	vc := v
	return predicate.ImageProcess(sql.FieldNEQ(FieldProcess, vc))
}

// ProcessIn applies the In predicate on the "process" field.
func ProcessIn(vs ...types.ImageProcess) predicate.ImageProcess {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImageProcess(sql.FieldIn(FieldProcess, v...))
}

// ProcessNotIn applies the NotIn predicate on the "process" field.
func ProcessNotIn(vs ...types.ImageProcess) predicate.ImageProcess {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImageProcess(sql.FieldNotIn(FieldProcess, v...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ImageProcess {
	return predicate.ImageProcess(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImageProcess) predicate.ImageProcess {
	return predicate.ImageProcess(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImageProcess) predicate.ImageProcess {
	return predicate.ImageProcess(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImageProcess) predicate.ImageProcess {
	return predicate.ImageProcess(sql.NotPredicates(p))
}
