// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wsw/backend/ent/imageprocess"
	"wsw/backend/ent/predicate"
	"wsw/backend/ent/types"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ImageProcessUpdate is the builder for updating ImageProcess entities.
type ImageProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ImageProcessMutation
}

// Where appends a list predicates to the ImageProcessUpdate builder.
func (ipu *ImageProcessUpdate) Where(ps ...predicate.ImageProcess) *ImageProcessUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetStatus sets the "status" field.
func (ipu *ImageProcessUpdate) SetStatus(te types.StatusEnum) *ImageProcessUpdate {
	ipu.mutation.SetStatus(te)
	return ipu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableStatus(te *types.StatusEnum) *ImageProcessUpdate {
	if te != nil {
		ipu.SetStatus(*te)
	}
	return ipu
}

// SetProcess sets the "process" field.
func (ipu *ImageProcessUpdate) SetProcess(tp types.ImageProcess) *ImageProcessUpdate {
	ipu.mutation.SetProcess(tp)
	return ipu
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableProcess(tp *types.ImageProcess) *ImageProcessUpdate {
	if tp != nil {
		ipu.SetProcess(*tp)
	}
	return ipu
}

// SetProcessOptions sets the "process_options" field.
func (ipu *ImageProcessUpdate) SetProcessOptions(tpo []types.ImageProcessOptions) *ImageProcessUpdate {
	ipu.mutation.SetProcessOptions(tpo)
	return ipu
}

// AppendProcessOptions appends tpo to the "process_options" field.
func (ipu *ImageProcessUpdate) AppendProcessOptions(tpo []types.ImageProcessOptions) *ImageProcessUpdate {
	ipu.mutation.AppendProcessOptions(tpo)
	return ipu
}

// SetCreatedAt sets the "created_at" field.
func (ipu *ImageProcessUpdate) SetCreatedAt(t time.Time) *ImageProcessUpdate {
	ipu.mutation.SetCreatedAt(t)
	return ipu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableCreatedAt(t *time.Time) *ImageProcessUpdate {
	if t != nil {
		ipu.SetCreatedAt(*t)
	}
	return ipu
}

// SetUpdatedAt sets the "updated_at" field.
func (ipu *ImageProcessUpdate) SetUpdatedAt(t time.Time) *ImageProcessUpdate {
	ipu.mutation.SetUpdatedAt(t)
	return ipu
}

// Mutation returns the ImageProcessMutation object of the builder.
func (ipu *ImageProcessUpdate) Mutation() *ImageProcessMutation {
	return ipu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *ImageProcessUpdate) Save(ctx context.Context) (int, error) {
	ipu.defaults()
	return withHooks(ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *ImageProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *ImageProcessUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *ImageProcessUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipu *ImageProcessUpdate) defaults() {
	if _, ok := ipu.mutation.UpdatedAt(); !ok {
		v := imageprocess.UpdateDefaultUpdatedAt()
		ipu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *ImageProcessUpdate) check() error {
	if v, ok := ipu.mutation.Status(); ok {
		if err := imageprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ImageProcess.status": %w`, err)}
		}
	}
	if v, ok := ipu.mutation.Process(); ok {
		if err := imageprocess.ProcessValidator(v); err != nil {
			return &ValidationError{Name: "process", err: fmt.Errorf(`ent: validator failed for field "ImageProcess.process": %w`, err)}
		}
	}
	return nil
}

func (ipu *ImageProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ipu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageprocess.Table, imageprocess.Columns, sqlgraph.NewFieldSpec(imageprocess.FieldID, field.TypeInt))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.Status(); ok {
		_spec.SetField(imageprocess.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ipu.mutation.Process(); ok {
		_spec.SetField(imageprocess.FieldProcess, field.TypeEnum, value)
	}
	if value, ok := ipu.mutation.ProcessOptions(); ok {
		_spec.SetField(imageprocess.FieldProcessOptions, field.TypeJSON, value)
	}
	if value, ok := ipu.mutation.AppendedProcessOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, imageprocess.FieldProcessOptions, value)
		})
	}
	if value, ok := ipu.mutation.CreatedAt(); ok {
		_spec.SetField(imageprocess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ipu.mutation.UpdatedAt(); ok {
		_spec.SetField(imageprocess.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// ImageProcessUpdateOne is the builder for updating a single ImageProcess entity.
type ImageProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageProcessMutation
}

// SetStatus sets the "status" field.
func (ipuo *ImageProcessUpdateOne) SetStatus(te types.StatusEnum) *ImageProcessUpdateOne {
	ipuo.mutation.SetStatus(te)
	return ipuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableStatus(te *types.StatusEnum) *ImageProcessUpdateOne {
	if te != nil {
		ipuo.SetStatus(*te)
	}
	return ipuo
}

// SetProcess sets the "process" field.
func (ipuo *ImageProcessUpdateOne) SetProcess(tp types.ImageProcess) *ImageProcessUpdateOne {
	ipuo.mutation.SetProcess(tp)
	return ipuo
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableProcess(tp *types.ImageProcess) *ImageProcessUpdateOne {
	if tp != nil {
		ipuo.SetProcess(*tp)
	}
	return ipuo
}

// SetProcessOptions sets the "process_options" field.
func (ipuo *ImageProcessUpdateOne) SetProcessOptions(tpo []types.ImageProcessOptions) *ImageProcessUpdateOne {
	ipuo.mutation.SetProcessOptions(tpo)
	return ipuo
}

// AppendProcessOptions appends tpo to the "process_options" field.
func (ipuo *ImageProcessUpdateOne) AppendProcessOptions(tpo []types.ImageProcessOptions) *ImageProcessUpdateOne {
	ipuo.mutation.AppendProcessOptions(tpo)
	return ipuo
}

// SetCreatedAt sets the "created_at" field.
func (ipuo *ImageProcessUpdateOne) SetCreatedAt(t time.Time) *ImageProcessUpdateOne {
	ipuo.mutation.SetCreatedAt(t)
	return ipuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableCreatedAt(t *time.Time) *ImageProcessUpdateOne {
	if t != nil {
		ipuo.SetCreatedAt(*t)
	}
	return ipuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ipuo *ImageProcessUpdateOne) SetUpdatedAt(t time.Time) *ImageProcessUpdateOne {
	ipuo.mutation.SetUpdatedAt(t)
	return ipuo
}

// Mutation returns the ImageProcessMutation object of the builder.
func (ipuo *ImageProcessUpdateOne) Mutation() *ImageProcessMutation {
	return ipuo.mutation
}

// Where appends a list predicates to the ImageProcessUpdate builder.
func (ipuo *ImageProcessUpdateOne) Where(ps ...predicate.ImageProcess) *ImageProcessUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *ImageProcessUpdateOne) Select(field string, fields ...string) *ImageProcessUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated ImageProcess entity.
func (ipuo *ImageProcessUpdateOne) Save(ctx context.Context) (*ImageProcess, error) {
	ipuo.defaults()
	return withHooks(ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *ImageProcessUpdateOne) SaveX(ctx context.Context) *ImageProcess {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *ImageProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *ImageProcessUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipuo *ImageProcessUpdateOne) defaults() {
	if _, ok := ipuo.mutation.UpdatedAt(); !ok {
		v := imageprocess.UpdateDefaultUpdatedAt()
		ipuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *ImageProcessUpdateOne) check() error {
	if v, ok := ipuo.mutation.Status(); ok {
		if err := imageprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ImageProcess.status": %w`, err)}
		}
	}
	if v, ok := ipuo.mutation.Process(); ok {
		if err := imageprocess.ProcessValidator(v); err != nil {
			return &ValidationError{Name: "process", err: fmt.Errorf(`ent: validator failed for field "ImageProcess.process": %w`, err)}
		}
	}
	return nil
}

func (ipuo *ImageProcessUpdateOne) sqlSave(ctx context.Context) (_node *ImageProcess, err error) {
	if err := ipuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageprocess.Table, imageprocess.Columns, sqlgraph.NewFieldSpec(imageprocess.FieldID, field.TypeInt))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageprocess.FieldID)
		for _, f := range fields {
			if !imageprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imageprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.Status(); ok {
		_spec.SetField(imageprocess.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ipuo.mutation.Process(); ok {
		_spec.SetField(imageprocess.FieldProcess, field.TypeEnum, value)
	}
	if value, ok := ipuo.mutation.ProcessOptions(); ok {
		_spec.SetField(imageprocess.FieldProcessOptions, field.TypeJSON, value)
	}
	if value, ok := ipuo.mutation.AppendedProcessOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, imageprocess.FieldProcessOptions, value)
		})
	}
	if value, ok := ipuo.mutation.CreatedAt(); ok {
		_spec.SetField(imageprocess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ipuo.mutation.UpdatedAt(); ok {
		_spec.SetField(imageprocess.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ImageProcess{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
