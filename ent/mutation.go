// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"wsw/backend/ent/errorresult"
	"wsw/backend/ent/imageprocess"
	"wsw/backend/ent/predicate"
	"wsw/backend/ent/stat"
	"wsw/backend/ent/token"
	"wsw/backend/ent/types"
	"wsw/backend/ent/uploadimage"
	"wsw/backend/ent/url"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeErrorResult  = "ErrorResult"
	TypeImageProcess = "ImageProcess"
	TypeStat         = "Stat"
	TypeToken        = "Token"
	TypeUploadImage  = "UploadImage"
	TypeURL          = "Url"
)

// ErrorResultMutation represents an operation that mutates the ErrorResult nodes in the graph.
type ErrorResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	message       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ErrorResult, error)
	predicates    []predicate.ErrorResult
}

var _ ent.Mutation = (*ErrorResultMutation)(nil)

// errorresultOption allows management of the mutation configuration using functional options.
type errorresultOption func(*ErrorResultMutation)

// newErrorResultMutation creates new mutation for the ErrorResult entity.
func newErrorResultMutation(c config, op Op, opts ...errorresultOption) *ErrorResultMutation {
	m := &ErrorResultMutation{
		config:        c,
		op:            op,
		typ:           TypeErrorResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withErrorResultID sets the ID field of the mutation.
func withErrorResultID(id int) errorresultOption {
	return func(m *ErrorResultMutation) {
		var (
			err   error
			once  sync.Once
			value *ErrorResult
		)
		m.oldValue = func(ctx context.Context) (*ErrorResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ErrorResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withErrorResult sets the old ErrorResult of the mutation.
func withErrorResult(node *ErrorResult) errorresultOption {
	return func(m *ErrorResultMutation) {
		m.oldValue = func(context.Context) (*ErrorResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ErrorResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ErrorResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ErrorResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ErrorResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ErrorResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ErrorResultMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ErrorResultMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ErrorResult entity.
// If the ErrorResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ErrorResultMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ErrorResultMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMessage sets the "message" field.
func (m *ErrorResultMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ErrorResultMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the ErrorResult entity.
// If the ErrorResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ErrorResultMutation) OldMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *ErrorResultMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[errorresult.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *ErrorResultMutation) MessageCleared() bool {
	_, ok := m.clearedFields[errorresult.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *ErrorResultMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, errorresult.FieldMessage)
}

// Where appends a list predicates to the ErrorResultMutation builder.
func (m *ErrorResultMutation) Where(ps ...predicate.ErrorResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ErrorResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ErrorResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ErrorResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ErrorResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ErrorResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ErrorResult).
func (m *ErrorResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ErrorResultMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, errorresult.FieldCreatedAt)
	}
	if m.message != nil {
		fields = append(fields, errorresult.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ErrorResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case errorresult.FieldCreatedAt:
		return m.CreatedAt()
	case errorresult.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ErrorResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case errorresult.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case errorresult.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown ErrorResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ErrorResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case errorresult.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case errorresult.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown ErrorResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ErrorResultMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ErrorResultMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ErrorResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ErrorResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ErrorResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(errorresult.FieldMessage) {
		fields = append(fields, errorresult.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ErrorResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ErrorResultMutation) ClearField(name string) error {
	switch name {
	case errorresult.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown ErrorResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ErrorResultMutation) ResetField(name string) error {
	switch name {
	case errorresult.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case errorresult.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown ErrorResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ErrorResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ErrorResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ErrorResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ErrorResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ErrorResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ErrorResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ErrorResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ErrorResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ErrorResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ErrorResult edge %s", name)
}

// ImageProcessMutation represents an operation that mutates the ImageProcess nodes in the graph.
type ImageProcessMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	status                *types.StatusEnum
	process               *types.ImageProcess
	process_options       *[]types.ImageProcessOptions
	appendprocess_options []types.ImageProcessOptions
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*ImageProcess, error)
	predicates            []predicate.ImageProcess
}

var _ ent.Mutation = (*ImageProcessMutation)(nil)

// imageprocessOption allows management of the mutation configuration using functional options.
type imageprocessOption func(*ImageProcessMutation)

// newImageProcessMutation creates new mutation for the ImageProcess entity.
func newImageProcessMutation(c config, op Op, opts ...imageprocessOption) *ImageProcessMutation {
	m := &ImageProcessMutation{
		config:        c,
		op:            op,
		typ:           TypeImageProcess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageProcessID sets the ID field of the mutation.
func withImageProcessID(id int) imageprocessOption {
	return func(m *ImageProcessMutation) {
		var (
			err   error
			once  sync.Once
			value *ImageProcess
		)
		m.oldValue = func(ctx context.Context) (*ImageProcess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImageProcess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImageProcess sets the old ImageProcess of the mutation.
func withImageProcess(node *ImageProcess) imageprocessOption {
	return func(m *ImageProcessMutation) {
		m.oldValue = func(context.Context) (*ImageProcess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageProcessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageProcessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageProcessMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageProcessMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ImageProcess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *ImageProcessMutation) SetStatus(te types.StatusEnum) {
	m.status = &te
}

// Status returns the value of the "status" field in the mutation.
func (m *ImageProcessMutation) Status() (r types.StatusEnum, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldStatus(ctx context.Context) (v types.StatusEnum, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ImageProcessMutation) ResetStatus() {
	m.status = nil
}

// SetProcess sets the "process" field.
func (m *ImageProcessMutation) SetProcess(tp types.ImageProcess) {
	m.process = &tp
}

// Process returns the value of the "process" field in the mutation.
func (m *ImageProcessMutation) Process() (r types.ImageProcess, exists bool) {
	v := m.process
	if v == nil {
		return
	}
	return *v, true
}

// OldProcess returns the old "process" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldProcess(ctx context.Context) (v types.ImageProcess, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcess: %w", err)
	}
	return oldValue.Process, nil
}

// ResetProcess resets all changes to the "process" field.
func (m *ImageProcessMutation) ResetProcess() {
	m.process = nil
}

// SetProcessOptions sets the "process_options" field.
func (m *ImageProcessMutation) SetProcessOptions(tpo []types.ImageProcessOptions) {
	m.process_options = &tpo
	m.appendprocess_options = nil
}

// ProcessOptions returns the value of the "process_options" field in the mutation.
func (m *ImageProcessMutation) ProcessOptions() (r []types.ImageProcessOptions, exists bool) {
	v := m.process_options
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessOptions returns the old "process_options" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldProcessOptions(ctx context.Context) (v []types.ImageProcessOptions, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessOptions: %w", err)
	}
	return oldValue.ProcessOptions, nil
}

// AppendProcessOptions adds tpo to the "process_options" field.
func (m *ImageProcessMutation) AppendProcessOptions(tpo []types.ImageProcessOptions) {
	m.appendprocess_options = append(m.appendprocess_options, tpo...)
}

// AppendedProcessOptions returns the list of values that were appended to the "process_options" field in this mutation.
func (m *ImageProcessMutation) AppendedProcessOptions() ([]types.ImageProcessOptions, bool) {
	if len(m.appendprocess_options) == 0 {
		return nil, false
	}
	return m.appendprocess_options, true
}

// ResetProcessOptions resets all changes to the "process_options" field.
func (m *ImageProcessMutation) ResetProcessOptions() {
	m.process_options = nil
	m.appendprocess_options = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ImageProcessMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ImageProcessMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ImageProcessMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ImageProcessMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ImageProcessMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ImageProcessMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the ImageProcessMutation builder.
func (m *ImageProcessMutation) Where(ps ...predicate.ImageProcess) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageProcessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageProcessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ImageProcess, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageProcessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageProcessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ImageProcess).
func (m *ImageProcessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageProcessMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, imageprocess.FieldStatus)
	}
	if m.process != nil {
		fields = append(fields, imageprocess.FieldProcess)
	}
	if m.process_options != nil {
		fields = append(fields, imageprocess.FieldProcessOptions)
	}
	if m.created_at != nil {
		fields = append(fields, imageprocess.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, imageprocess.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageProcessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case imageprocess.FieldStatus:
		return m.Status()
	case imageprocess.FieldProcess:
		return m.Process()
	case imageprocess.FieldProcessOptions:
		return m.ProcessOptions()
	case imageprocess.FieldCreatedAt:
		return m.CreatedAt()
	case imageprocess.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageProcessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case imageprocess.FieldStatus:
		return m.OldStatus(ctx)
	case imageprocess.FieldProcess:
		return m.OldProcess(ctx)
	case imageprocess.FieldProcessOptions:
		return m.OldProcessOptions(ctx)
	case imageprocess.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case imageprocess.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ImageProcess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageProcessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case imageprocess.FieldStatus:
		v, ok := value.(types.StatusEnum)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case imageprocess.FieldProcess:
		v, ok := value.(types.ImageProcess)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcess(v)
		return nil
	case imageprocess.FieldProcessOptions:
		v, ok := value.([]types.ImageProcessOptions)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessOptions(v)
		return nil
	case imageprocess.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case imageprocess.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ImageProcess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageProcessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageProcessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageProcessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImageProcess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageProcessMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageProcessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageProcessMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ImageProcess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageProcessMutation) ResetField(name string) error {
	switch name {
	case imageprocess.FieldStatus:
		m.ResetStatus()
		return nil
	case imageprocess.FieldProcess:
		m.ResetProcess()
		return nil
	case imageprocess.FieldProcessOptions:
		m.ResetProcessOptions()
		return nil
	case imageprocess.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case imageprocess.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ImageProcess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageProcessMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageProcessMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageProcessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageProcessMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageProcessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageProcessMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageProcessMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ImageProcess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageProcessMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ImageProcess edge %s", name)
}

// StatMutation represents an operation that mutates the Stat nodes in the graph.
type StatMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	title         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Stat, error)
	predicates    []predicate.Stat
}

var _ ent.Mutation = (*StatMutation)(nil)

// statOption allows management of the mutation configuration using functional options.
type statOption func(*StatMutation)

// newStatMutation creates new mutation for the Stat entity.
func newStatMutation(c config, op Op, opts ...statOption) *StatMutation {
	m := &StatMutation{
		config:        c,
		op:            op,
		typ:           TypeStat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatID sets the ID field of the mutation.
func withStatID(id int) statOption {
	return func(m *StatMutation) {
		var (
			err   error
			once  sync.Once
			value *Stat
		)
		m.oldValue = func(ctx context.Context) (*Stat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStat sets the old Stat of the mutation.
func withStat(node *Stat) statOption {
	return func(m *StatMutation) {
		m.oldValue = func(context.Context) (*Stat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StatMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StatMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Stat entity.
// If the Stat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StatMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetTitle sets the "title" field.
func (m *StatMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *StatMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Stat entity.
// If the Stat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatMutation) OldTitle(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *StatMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[stat.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *StatMutation) TitleCleared() bool {
	_, ok := m.clearedFields[stat.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *StatMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, stat.FieldTitle)
}

// Where appends a list predicates to the StatMutation builder.
func (m *StatMutation) Where(ps ...predicate.Stat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Stat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Stat).
func (m *StatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, stat.FieldCreatedAt)
	}
	if m.title != nil {
		fields = append(fields, stat.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stat.FieldCreatedAt:
		return m.CreatedAt()
	case stat.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stat.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case stat.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Stat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stat.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case stat.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Stat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Stat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(stat.FieldTitle) {
		fields = append(fields, stat.FieldTitle)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatMutation) ClearField(name string) error {
	switch name {
	case stat.FieldTitle:
		m.ClearTitle()
		return nil
	}
	return fmt.Errorf("unknown Stat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatMutation) ResetField(name string) error {
	switch name {
	case stat.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case stat.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Stat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Stat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Stat edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op            Op
	typ           string
	id            *int
	value         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Token, error)
	predicates    []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id int) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetValue sets the "value" field.
func (m *TokenMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *TokenMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *TokenMutation) ResetValue() {
	m.value = nil
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.value != nil {
		fields = append(fields, token.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Token edge %s", name)
}

// UploadImageMutation represents an operation that mutates the UploadImage nodes in the graph.
type UploadImageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	filename            *string
	destination_path    *string
	original_filename   *string
	_type               *string
	clearedFields       map[string]struct{}
	imageprocess        map[int]struct{}
	removedimageprocess map[int]struct{}
	clearedimageprocess bool
	done                bool
	oldValue            func(context.Context) (*UploadImage, error)
	predicates          []predicate.UploadImage
}

var _ ent.Mutation = (*UploadImageMutation)(nil)

// uploadimageOption allows management of the mutation configuration using functional options.
type uploadimageOption func(*UploadImageMutation)

// newUploadImageMutation creates new mutation for the UploadImage entity.
func newUploadImageMutation(c config, op Op, opts ...uploadimageOption) *UploadImageMutation {
	m := &UploadImageMutation{
		config:        c,
		op:            op,
		typ:           TypeUploadImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUploadImageID sets the ID field of the mutation.
func withUploadImageID(id int) uploadimageOption {
	return func(m *UploadImageMutation) {
		var (
			err   error
			once  sync.Once
			value *UploadImage
		)
		m.oldValue = func(ctx context.Context) (*UploadImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UploadImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUploadImage sets the old UploadImage of the mutation.
func withUploadImage(node *UploadImage) uploadimageOption {
	return func(m *UploadImageMutation) {
		m.oldValue = func(context.Context) (*UploadImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UploadImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UploadImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UploadImageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UploadImageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UploadImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFilename sets the "filename" field.
func (m *UploadImageMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *UploadImageMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the UploadImage entity.
// If the UploadImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadImageMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *UploadImageMutation) ResetFilename() {
	m.filename = nil
}

// SetDestinationPath sets the "destination_path" field.
func (m *UploadImageMutation) SetDestinationPath(s string) {
	m.destination_path = &s
}

// DestinationPath returns the value of the "destination_path" field in the mutation.
func (m *UploadImageMutation) DestinationPath() (r string, exists bool) {
	v := m.destination_path
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationPath returns the old "destination_path" field's value of the UploadImage entity.
// If the UploadImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadImageMutation) OldDestinationPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationPath: %w", err)
	}
	return oldValue.DestinationPath, nil
}

// ResetDestinationPath resets all changes to the "destination_path" field.
func (m *UploadImageMutation) ResetDestinationPath() {
	m.destination_path = nil
}

// SetOriginalFilename sets the "original_filename" field.
func (m *UploadImageMutation) SetOriginalFilename(s string) {
	m.original_filename = &s
}

// OriginalFilename returns the value of the "original_filename" field in the mutation.
func (m *UploadImageMutation) OriginalFilename() (r string, exists bool) {
	v := m.original_filename
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalFilename returns the old "original_filename" field's value of the UploadImage entity.
// If the UploadImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadImageMutation) OldOriginalFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalFilename: %w", err)
	}
	return oldValue.OriginalFilename, nil
}

// ResetOriginalFilename resets all changes to the "original_filename" field.
func (m *UploadImageMutation) ResetOriginalFilename() {
	m.original_filename = nil
}

// SetType sets the "type" field.
func (m *UploadImageMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *UploadImageMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the UploadImage entity.
// If the UploadImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadImageMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UploadImageMutation) ResetType() {
	m._type = nil
}

// AddImageprocesIDs adds the "imageprocess" edge to the ImageProcess entity by ids.
func (m *UploadImageMutation) AddImageprocesIDs(ids ...int) {
	if m.imageprocess == nil {
		m.imageprocess = make(map[int]struct{})
	}
	for i := range ids {
		m.imageprocess[ids[i]] = struct{}{}
	}
}

// ClearImageprocess clears the "imageprocess" edge to the ImageProcess entity.
func (m *UploadImageMutation) ClearImageprocess() {
	m.clearedimageprocess = true
}

// ImageprocessCleared reports if the "imageprocess" edge to the ImageProcess entity was cleared.
func (m *UploadImageMutation) ImageprocessCleared() bool {
	return m.clearedimageprocess
}

// RemoveImageprocesIDs removes the "imageprocess" edge to the ImageProcess entity by IDs.
func (m *UploadImageMutation) RemoveImageprocesIDs(ids ...int) {
	if m.removedimageprocess == nil {
		m.removedimageprocess = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.imageprocess, ids[i])
		m.removedimageprocess[ids[i]] = struct{}{}
	}
}

// RemovedImageprocess returns the removed IDs of the "imageprocess" edge to the ImageProcess entity.
func (m *UploadImageMutation) RemovedImageprocessIDs() (ids []int) {
	for id := range m.removedimageprocess {
		ids = append(ids, id)
	}
	return
}

// ImageprocessIDs returns the "imageprocess" edge IDs in the mutation.
func (m *UploadImageMutation) ImageprocessIDs() (ids []int) {
	for id := range m.imageprocess {
		ids = append(ids, id)
	}
	return
}

// ResetImageprocess resets all changes to the "imageprocess" edge.
func (m *UploadImageMutation) ResetImageprocess() {
	m.imageprocess = nil
	m.clearedimageprocess = false
	m.removedimageprocess = nil
}

// Where appends a list predicates to the UploadImageMutation builder.
func (m *UploadImageMutation) Where(ps ...predicate.UploadImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UploadImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UploadImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UploadImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UploadImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UploadImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UploadImage).
func (m *UploadImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UploadImageMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.filename != nil {
		fields = append(fields, uploadimage.FieldFilename)
	}
	if m.destination_path != nil {
		fields = append(fields, uploadimage.FieldDestinationPath)
	}
	if m.original_filename != nil {
		fields = append(fields, uploadimage.FieldOriginalFilename)
	}
	if m._type != nil {
		fields = append(fields, uploadimage.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UploadImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uploadimage.FieldFilename:
		return m.Filename()
	case uploadimage.FieldDestinationPath:
		return m.DestinationPath()
	case uploadimage.FieldOriginalFilename:
		return m.OriginalFilename()
	case uploadimage.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UploadImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uploadimage.FieldFilename:
		return m.OldFilename(ctx)
	case uploadimage.FieldDestinationPath:
		return m.OldDestinationPath(ctx)
	case uploadimage.FieldOriginalFilename:
		return m.OldOriginalFilename(ctx)
	case uploadimage.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown UploadImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uploadimage.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case uploadimage.FieldDestinationPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationPath(v)
		return nil
	case uploadimage.FieldOriginalFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalFilename(v)
		return nil
	case uploadimage.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown UploadImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UploadImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UploadImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UploadImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UploadImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UploadImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UploadImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UploadImageMutation) ResetField(name string) error {
	switch name {
	case uploadimage.FieldFilename:
		m.ResetFilename()
		return nil
	case uploadimage.FieldDestinationPath:
		m.ResetDestinationPath()
		return nil
	case uploadimage.FieldOriginalFilename:
		m.ResetOriginalFilename()
		return nil
	case uploadimage.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown UploadImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UploadImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.imageprocess != nil {
		edges = append(edges, uploadimage.EdgeImageprocess)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UploadImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uploadimage.EdgeImageprocess:
		ids := make([]ent.Value, 0, len(m.imageprocess))
		for id := range m.imageprocess {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UploadImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedimageprocess != nil {
		edges = append(edges, uploadimage.EdgeImageprocess)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UploadImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case uploadimage.EdgeImageprocess:
		ids := make([]ent.Value, 0, len(m.removedimageprocess))
		for id := range m.removedimageprocess {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UploadImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedimageprocess {
		edges = append(edges, uploadimage.EdgeImageprocess)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UploadImageMutation) EdgeCleared(name string) bool {
	switch name {
	case uploadimage.EdgeImageprocess:
		return m.clearedimageprocess
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UploadImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UploadImageMutation) ResetEdge(name string) error {
	switch name {
	case uploadimage.EdgeImageprocess:
		m.ResetImageprocess()
		return nil
	}
	return fmt.Errorf("unknown UploadImage edge %s", name)
}

// URLMutation represents an operation that mutates the Url nodes in the graph.
type URLMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	url                *string
	status             *types.StatusEnum
	relative_path      *string
	clearedFields      map[string]struct{}
	errorresult        map[int]struct{}
	removederrorresult map[int]struct{}
	clearederrorresult bool
	stat               map[int]struct{}
	removedstat        map[int]struct{}
	clearedstat        bool
	done               bool
	oldValue           func(context.Context) (*Url, error)
	predicates         []predicate.Url
}

var _ ent.Mutation = (*URLMutation)(nil)

// urlOption allows management of the mutation configuration using functional options.
type urlOption func(*URLMutation)

// newURLMutation creates new mutation for the Url entity.
func newURLMutation(c config, op Op, opts ...urlOption) *URLMutation {
	m := &URLMutation{
		config:        c,
		op:            op,
		typ:           TypeURL,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUrlID sets the ID field of the mutation.
func withUrlID(id int) urlOption {
	return func(m *URLMutation) {
		var (
			err   error
			once  sync.Once
			value *Url
		)
		m.oldValue = func(ctx context.Context) (*Url, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Url.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUrl sets the old Url of the mutation.
func withUrl(node *Url) urlOption {
	return func(m *URLMutation) {
		m.oldValue = func(context.Context) (*Url, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m URLMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m URLMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *URLMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *URLMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Url.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *URLMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *URLMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *URLMutation) ResetURL() {
	m.url = nil
}

// SetStatus sets the "status" field.
func (m *URLMutation) SetStatus(te types.StatusEnum) {
	m.status = &te
}

// Status returns the value of the "status" field in the mutation.
func (m *URLMutation) Status() (r types.StatusEnum, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldStatus(ctx context.Context) (v types.StatusEnum, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *URLMutation) ResetStatus() {
	m.status = nil
}

// SetRelativePath sets the "relative_path" field.
func (m *URLMutation) SetRelativePath(s string) {
	m.relative_path = &s
}

// RelativePath returns the value of the "relative_path" field in the mutation.
func (m *URLMutation) RelativePath() (r string, exists bool) {
	v := m.relative_path
	if v == nil {
		return
	}
	return *v, true
}

// OldRelativePath returns the old "relative_path" field's value of the Url entity.
// If the Url object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *URLMutation) OldRelativePath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelativePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelativePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelativePath: %w", err)
	}
	return oldValue.RelativePath, nil
}

// ClearRelativePath clears the value of the "relative_path" field.
func (m *URLMutation) ClearRelativePath() {
	m.relative_path = nil
	m.clearedFields[url.FieldRelativePath] = struct{}{}
}

// RelativePathCleared returns if the "relative_path" field was cleared in this mutation.
func (m *URLMutation) RelativePathCleared() bool {
	_, ok := m.clearedFields[url.FieldRelativePath]
	return ok
}

// ResetRelativePath resets all changes to the "relative_path" field.
func (m *URLMutation) ResetRelativePath() {
	m.relative_path = nil
	delete(m.clearedFields, url.FieldRelativePath)
}

// AddErrorresultIDs adds the "errorresult" edge to the ErrorResult entity by ids.
func (m *URLMutation) AddErrorresultIDs(ids ...int) {
	if m.errorresult == nil {
		m.errorresult = make(map[int]struct{})
	}
	for i := range ids {
		m.errorresult[ids[i]] = struct{}{}
	}
}

// ClearErrorresult clears the "errorresult" edge to the ErrorResult entity.
func (m *URLMutation) ClearErrorresult() {
	m.clearederrorresult = true
}

// ErrorresultCleared reports if the "errorresult" edge to the ErrorResult entity was cleared.
func (m *URLMutation) ErrorresultCleared() bool {
	return m.clearederrorresult
}

// RemoveErrorresultIDs removes the "errorresult" edge to the ErrorResult entity by IDs.
func (m *URLMutation) RemoveErrorresultIDs(ids ...int) {
	if m.removederrorresult == nil {
		m.removederrorresult = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.errorresult, ids[i])
		m.removederrorresult[ids[i]] = struct{}{}
	}
}

// RemovedErrorresult returns the removed IDs of the "errorresult" edge to the ErrorResult entity.
func (m *URLMutation) RemovedErrorresultIDs() (ids []int) {
	for id := range m.removederrorresult {
		ids = append(ids, id)
	}
	return
}

// ErrorresultIDs returns the "errorresult" edge IDs in the mutation.
func (m *URLMutation) ErrorresultIDs() (ids []int) {
	for id := range m.errorresult {
		ids = append(ids, id)
	}
	return
}

// ResetErrorresult resets all changes to the "errorresult" edge.
func (m *URLMutation) ResetErrorresult() {
	m.errorresult = nil
	m.clearederrorresult = false
	m.removederrorresult = nil
}

// AddStatIDs adds the "stat" edge to the Stat entity by ids.
func (m *URLMutation) AddStatIDs(ids ...int) {
	if m.stat == nil {
		m.stat = make(map[int]struct{})
	}
	for i := range ids {
		m.stat[ids[i]] = struct{}{}
	}
}

// ClearStat clears the "stat" edge to the Stat entity.
func (m *URLMutation) ClearStat() {
	m.clearedstat = true
}

// StatCleared reports if the "stat" edge to the Stat entity was cleared.
func (m *URLMutation) StatCleared() bool {
	return m.clearedstat
}

// RemoveStatIDs removes the "stat" edge to the Stat entity by IDs.
func (m *URLMutation) RemoveStatIDs(ids ...int) {
	if m.removedstat == nil {
		m.removedstat = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.stat, ids[i])
		m.removedstat[ids[i]] = struct{}{}
	}
}

// RemovedStat returns the removed IDs of the "stat" edge to the Stat entity.
func (m *URLMutation) RemovedStatIDs() (ids []int) {
	for id := range m.removedstat {
		ids = append(ids, id)
	}
	return
}

// StatIDs returns the "stat" edge IDs in the mutation.
func (m *URLMutation) StatIDs() (ids []int) {
	for id := range m.stat {
		ids = append(ids, id)
	}
	return
}

// ResetStat resets all changes to the "stat" edge.
func (m *URLMutation) ResetStat() {
	m.stat = nil
	m.clearedstat = false
	m.removedstat = nil
}

// Where appends a list predicates to the URLMutation builder.
func (m *URLMutation) Where(ps ...predicate.Url) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the URLMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *URLMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Url, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *URLMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *URLMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Url).
func (m *URLMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *URLMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.url != nil {
		fields = append(fields, url.FieldURL)
	}
	if m.status != nil {
		fields = append(fields, url.FieldStatus)
	}
	if m.relative_path != nil {
		fields = append(fields, url.FieldRelativePath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *URLMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case url.FieldURL:
		return m.URL()
	case url.FieldStatus:
		return m.Status()
	case url.FieldRelativePath:
		return m.RelativePath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *URLMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case url.FieldURL:
		return m.OldURL(ctx)
	case url.FieldStatus:
		return m.OldStatus(ctx)
	case url.FieldRelativePath:
		return m.OldRelativePath(ctx)
	}
	return nil, fmt.Errorf("unknown Url field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *URLMutation) SetField(name string, value ent.Value) error {
	switch name {
	case url.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case url.FieldStatus:
		v, ok := value.(types.StatusEnum)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case url.FieldRelativePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelativePath(v)
		return nil
	}
	return fmt.Errorf("unknown Url field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *URLMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *URLMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *URLMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Url numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *URLMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(url.FieldRelativePath) {
		fields = append(fields, url.FieldRelativePath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *URLMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *URLMutation) ClearField(name string) error {
	switch name {
	case url.FieldRelativePath:
		m.ClearRelativePath()
		return nil
	}
	return fmt.Errorf("unknown Url nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *URLMutation) ResetField(name string) error {
	switch name {
	case url.FieldURL:
		m.ResetURL()
		return nil
	case url.FieldStatus:
		m.ResetStatus()
		return nil
	case url.FieldRelativePath:
		m.ResetRelativePath()
		return nil
	}
	return fmt.Errorf("unknown Url field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *URLMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.errorresult != nil {
		edges = append(edges, url.EdgeErrorresult)
	}
	if m.stat != nil {
		edges = append(edges, url.EdgeStat)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *URLMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case url.EdgeErrorresult:
		ids := make([]ent.Value, 0, len(m.errorresult))
		for id := range m.errorresult {
			ids = append(ids, id)
		}
		return ids
	case url.EdgeStat:
		ids := make([]ent.Value, 0, len(m.stat))
		for id := range m.stat {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *URLMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removederrorresult != nil {
		edges = append(edges, url.EdgeErrorresult)
	}
	if m.removedstat != nil {
		edges = append(edges, url.EdgeStat)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *URLMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case url.EdgeErrorresult:
		ids := make([]ent.Value, 0, len(m.removederrorresult))
		for id := range m.removederrorresult {
			ids = append(ids, id)
		}
		return ids
	case url.EdgeStat:
		ids := make([]ent.Value, 0, len(m.removedstat))
		for id := range m.removedstat {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *URLMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearederrorresult {
		edges = append(edges, url.EdgeErrorresult)
	}
	if m.clearedstat {
		edges = append(edges, url.EdgeStat)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *URLMutation) EdgeCleared(name string) bool {
	switch name {
	case url.EdgeErrorresult:
		return m.clearederrorresult
	case url.EdgeStat:
		return m.clearedstat
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *URLMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Url unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *URLMutation) ResetEdge(name string) error {
	switch name {
	case url.EdgeErrorresult:
		m.ResetErrorresult()
		return nil
	case url.EdgeStat:
		m.ResetStat()
		return nil
	}
	return fmt.Errorf("unknown Url edge %s", name)
}
