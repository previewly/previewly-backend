// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wsw/backend/ent/image"
	"wsw/backend/ent/stat"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatCreate is the builder for creating a Stat entity.
type StatCreate struct {
	config
	mutation *StatMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatCreate) SetCreatedAt(t time.Time) *StatCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatCreate) SetNillableCreatedAt(t *time.Time) *StatCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *StatCreate) SetTitle(s string) *StatCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sc *StatCreate) SetNillableTitle(s *string) *StatCreate {
	if s != nil {
		sc.SetTitle(*s)
	}
	return sc
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (sc *StatCreate) SetImageID(id int) *StatCreate {
	sc.mutation.SetImageID(id)
	return sc
}

// SetImage sets the "image" edge to the Image entity.
func (sc *StatCreate) SetImage(i *Image) *StatCreate {
	return sc.SetImageID(i.ID)
}

// Mutation returns the StatMutation object of the builder.
func (sc *StatCreate) Mutation() *StatMutation {
	return sc.mutation
}

// Save creates the Stat in the database.
func (sc *StatCreate) Save(ctx context.Context) (*Stat, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatCreate) SaveX(ctx context.Context) *Stat {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := stat.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Stat.created_at"`)}
	}
	if len(sc.mutation.ImageIDs()) == 0 {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required edge "Stat.image"`)}
	}
	return nil
}

func (sc *StatCreate) sqlSave(ctx context.Context) (*Stat, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatCreate) createSpec() (*Stat, *sqlgraph.CreateSpec) {
	var (
		_node = &Stat{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(stat.Table, sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(stat.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(stat.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if nodes := sc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stat.ImageTable,
			Columns: []string{stat.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.stat_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatCreateBulk is the builder for creating many Stat entities in bulk.
type StatCreateBulk struct {
	config
	err      error
	builders []*StatCreate
}

// Save creates the Stat entities in the database.
func (scb *StatCreateBulk) Save(ctx context.Context) ([]*Stat, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stat, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatCreateBulk) SaveX(ctx context.Context) []*Stat {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
