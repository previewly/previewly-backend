// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wsw/backend/ent/image"
	"wsw/backend/ent/predicate"
	"wsw/backend/ent/stat"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatUpdate is the builder for updating Stat entities.
type StatUpdate struct {
	config
	hooks    []Hook
	mutation *StatMutation
}

// Where appends a list predicates to the StatUpdate builder.
func (su *StatUpdate) Where(ps ...predicate.Stat) *StatUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StatUpdate) SetCreatedAt(t time.Time) *StatUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StatUpdate) SetNillableCreatedAt(t *time.Time) *StatUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *StatUpdate) SetTitle(s string) *StatUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *StatUpdate) SetNillableTitle(s *string) *StatUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// ClearTitle clears the value of the "title" field.
func (su *StatUpdate) ClearTitle() *StatUpdate {
	su.mutation.ClearTitle()
	return su
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (su *StatUpdate) SetImageID(id int) *StatUpdate {
	su.mutation.SetImageID(id)
	return su
}

// SetImage sets the "image" edge to the Image entity.
func (su *StatUpdate) SetImage(i *Image) *StatUpdate {
	return su.SetImageID(i.ID)
}

// Mutation returns the StatMutation object of the builder.
func (su *StatUpdate) Mutation() *StatMutation {
	return su.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (su *StatUpdate) ClearImage() *StatUpdate {
	su.mutation.ClearImage()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatUpdate) check() error {
	if su.mutation.ImageCleared() && len(su.mutation.ImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stat.image"`)
	}
	return nil
}

func (su *StatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stat.Table, stat.Columns, sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(stat.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(stat.FieldTitle, field.TypeString, value)
	}
	if su.mutation.TitleCleared() {
		_spec.ClearField(stat.FieldTitle, field.TypeString)
	}
	if su.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stat.ImageTable,
			Columns: []string{stat.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stat.ImageTable,
			Columns: []string{stat.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatUpdateOne is the builder for updating a single Stat entity.
type StatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *StatUpdateOne) SetCreatedAt(t time.Time) *StatUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StatUpdateOne) SetNillableCreatedAt(t *time.Time) *StatUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *StatUpdateOne) SetTitle(s string) *StatUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *StatUpdateOne) SetNillableTitle(s *string) *StatUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// ClearTitle clears the value of the "title" field.
func (suo *StatUpdateOne) ClearTitle() *StatUpdateOne {
	suo.mutation.ClearTitle()
	return suo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (suo *StatUpdateOne) SetImageID(id int) *StatUpdateOne {
	suo.mutation.SetImageID(id)
	return suo
}

// SetImage sets the "image" edge to the Image entity.
func (suo *StatUpdateOne) SetImage(i *Image) *StatUpdateOne {
	return suo.SetImageID(i.ID)
}

// Mutation returns the StatMutation object of the builder.
func (suo *StatUpdateOne) Mutation() *StatMutation {
	return suo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (suo *StatUpdateOne) ClearImage() *StatUpdateOne {
	suo.mutation.ClearImage()
	return suo
}

// Where appends a list predicates to the StatUpdate builder.
func (suo *StatUpdateOne) Where(ps ...predicate.Stat) *StatUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatUpdateOne) Select(field string, fields ...string) *StatUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stat entity.
func (suo *StatUpdateOne) Save(ctx context.Context) (*Stat, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatUpdateOne) SaveX(ctx context.Context) *Stat {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatUpdateOne) check() error {
	if suo.mutation.ImageCleared() && len(suo.mutation.ImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Stat.image"`)
	}
	return nil
}

func (suo *StatUpdateOne) sqlSave(ctx context.Context) (_node *Stat, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stat.Table, stat.Columns, sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stat.FieldID)
		for _, f := range fields {
			if !stat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(stat.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(stat.FieldTitle, field.TypeString, value)
	}
	if suo.mutation.TitleCleared() {
		_spec.ClearField(stat.FieldTitle, field.TypeString)
	}
	if suo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stat.ImageTable,
			Columns: []string{stat.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stat.ImageTable,
			Columns: []string{stat.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stat{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
