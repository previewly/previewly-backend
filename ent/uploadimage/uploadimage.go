// Code generated by ent, DO NOT EDIT.

package uploadimage

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the uploadimage type in the database.
	Label = "upload_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldDestinationPath holds the string denoting the destination_path field in the database.
	FieldDestinationPath = "destination_path"
	// FieldOriginalFilename holds the string denoting the original_filename field in the database.
	FieldOriginalFilename = "original_filename"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the uploadimage in the database.
	Table = "upload_images"
)

// Columns holds all SQL columns for uploadimage fields.
var Columns = []string{
	FieldID,
	FieldFilename,
	FieldDestinationPath,
	FieldOriginalFilename,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// DestinationPathValidator is a validator for the "destination_path" field. It is called by the builders before save.
	DestinationPathValidator func(string) error
	// OriginalFilenameValidator is a validator for the "original_filename" field. It is called by the builders before save.
	OriginalFilenameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)

// OrderOption defines the ordering options for the UploadImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByDestinationPath orders the results by the destination_path field.
func ByDestinationPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinationPath, opts...).ToFunc()
}

// ByOriginalFilename orders the results by the original_filename field.
func ByOriginalFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFilename, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}
