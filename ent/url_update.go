// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wsw/backend/domain/url"
	"wsw/backend/ent/errorresult"
	"wsw/backend/ent/predicate"
	"wsw/backend/ent/stat"
	enturl "wsw/backend/ent/url"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// URLUpdate is the builder for updating Url entities.
type URLUpdate struct {
	config
	hooks    []Hook
	mutation *URLMutation
}

// Where appends a list predicates to the URLUpdate builder.
func (uu *URLUpdate) Where(ps ...predicate.Url) *URLUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetURL sets the "url" field.
func (uu *URLUpdate) SetURL(s string) *URLUpdate {
	uu.mutation.SetURL(s)
	return uu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uu *URLUpdate) SetNillableURL(s *string) *URLUpdate {
	if s != nil {
		uu.SetURL(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *URLUpdate) SetStatus(u url.Status) *URLUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *URLUpdate) SetNillableStatus(u *url.Status) *URLUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetRelativePath sets the "relative_path" field.
func (uu *URLUpdate) SetRelativePath(s string) *URLUpdate {
	uu.mutation.SetRelativePath(s)
	return uu
}

// SetNillableRelativePath sets the "relative_path" field if the given value is not nil.
func (uu *URLUpdate) SetNillableRelativePath(s *string) *URLUpdate {
	if s != nil {
		uu.SetRelativePath(*s)
	}
	return uu
}

// ClearRelativePath clears the value of the "relative_path" field.
func (uu *URLUpdate) ClearRelativePath() *URLUpdate {
	uu.mutation.ClearRelativePath()
	return uu
}

// AddErrorresultIDs adds the "errorresult" edge to the ErrorResult entity by IDs.
func (uu *URLUpdate) AddErrorresultIDs(ids ...int) *URLUpdate {
	uu.mutation.AddErrorresultIDs(ids...)
	return uu
}

// AddErrorresult adds the "errorresult" edges to the ErrorResult entity.
func (uu *URLUpdate) AddErrorresult(e ...*ErrorResult) *URLUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddErrorresultIDs(ids...)
}

// AddStatIDs adds the "stat" edge to the Stat entity by IDs.
func (uu *URLUpdate) AddStatIDs(ids ...int) *URLUpdate {
	uu.mutation.AddStatIDs(ids...)
	return uu
}

// AddStat adds the "stat" edges to the Stat entity.
func (uu *URLUpdate) AddStat(s ...*Stat) *URLUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStatIDs(ids...)
}

// Mutation returns the URLMutation object of the builder.
func (uu *URLUpdate) Mutation() *URLMutation {
	return uu.mutation
}

// ClearErrorresult clears all "errorresult" edges to the ErrorResult entity.
func (uu *URLUpdate) ClearErrorresult() *URLUpdate {
	uu.mutation.ClearErrorresult()
	return uu
}

// RemoveErrorresultIDs removes the "errorresult" edge to ErrorResult entities by IDs.
func (uu *URLUpdate) RemoveErrorresultIDs(ids ...int) *URLUpdate {
	uu.mutation.RemoveErrorresultIDs(ids...)
	return uu
}

// RemoveErrorresult removes "errorresult" edges to ErrorResult entities.
func (uu *URLUpdate) RemoveErrorresult(e ...*ErrorResult) *URLUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveErrorresultIDs(ids...)
}

// ClearStat clears all "stat" edges to the Stat entity.
func (uu *URLUpdate) ClearStat() *URLUpdate {
	uu.mutation.ClearStat()
	return uu
}

// RemoveStatIDs removes the "stat" edge to Stat entities by IDs.
func (uu *URLUpdate) RemoveStatIDs(ids ...int) *URLUpdate {
	uu.mutation.RemoveStatIDs(ids...)
	return uu
}

// RemoveStat removes "stat" edges to Stat entities.
func (uu *URLUpdate) RemoveStat(s ...*Stat) *URLUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *URLUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *URLUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *URLUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *URLUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *URLUpdate) check() error {
	if v, ok := uu.mutation.Status(); ok {
		if err := enturl.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Url.status": %w`, err)}
		}
	}
	return nil
}

func (uu *URLUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enturl.Table, enturl.Columns, sqlgraph.NewFieldSpec(enturl.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.URL(); ok {
		_spec.SetField(enturl.FieldURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(enturl.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.RelativePath(); ok {
		_spec.SetField(enturl.FieldRelativePath, field.TypeString, value)
	}
	if uu.mutation.RelativePathCleared() {
		_spec.ClearField(enturl.FieldRelativePath, field.TypeString)
	}
	if uu.mutation.ErrorresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedErrorresultIDs(); len(nodes) > 0 && !uu.mutation.ErrorresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ErrorresultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStatIDs(); len(nodes) > 0 && !uu.mutation.StatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// URLUpdateOne is the builder for updating a single Url entity.
type URLUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *URLMutation
}

// SetURL sets the "url" field.
func (uuo *URLUpdateOne) SetURL(s string) *URLUpdateOne {
	uuo.mutation.SetURL(s)
	return uuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (uuo *URLUpdateOne) SetNillableURL(s *string) *URLUpdateOne {
	if s != nil {
		uuo.SetURL(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *URLUpdateOne) SetStatus(u url.Status) *URLUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *URLUpdateOne) SetNillableStatus(u *url.Status) *URLUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetRelativePath sets the "relative_path" field.
func (uuo *URLUpdateOne) SetRelativePath(s string) *URLUpdateOne {
	uuo.mutation.SetRelativePath(s)
	return uuo
}

// SetNillableRelativePath sets the "relative_path" field if the given value is not nil.
func (uuo *URLUpdateOne) SetNillableRelativePath(s *string) *URLUpdateOne {
	if s != nil {
		uuo.SetRelativePath(*s)
	}
	return uuo
}

// ClearRelativePath clears the value of the "relative_path" field.
func (uuo *URLUpdateOne) ClearRelativePath() *URLUpdateOne {
	uuo.mutation.ClearRelativePath()
	return uuo
}

// AddErrorresultIDs adds the "errorresult" edge to the ErrorResult entity by IDs.
func (uuo *URLUpdateOne) AddErrorresultIDs(ids ...int) *URLUpdateOne {
	uuo.mutation.AddErrorresultIDs(ids...)
	return uuo
}

// AddErrorresult adds the "errorresult" edges to the ErrorResult entity.
func (uuo *URLUpdateOne) AddErrorresult(e ...*ErrorResult) *URLUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddErrorresultIDs(ids...)
}

// AddStatIDs adds the "stat" edge to the Stat entity by IDs.
func (uuo *URLUpdateOne) AddStatIDs(ids ...int) *URLUpdateOne {
	uuo.mutation.AddStatIDs(ids...)
	return uuo
}

// AddStat adds the "stat" edges to the Stat entity.
func (uuo *URLUpdateOne) AddStat(s ...*Stat) *URLUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStatIDs(ids...)
}

// Mutation returns the URLMutation object of the builder.
func (uuo *URLUpdateOne) Mutation() *URLMutation {
	return uuo.mutation
}

// ClearErrorresult clears all "errorresult" edges to the ErrorResult entity.
func (uuo *URLUpdateOne) ClearErrorresult() *URLUpdateOne {
	uuo.mutation.ClearErrorresult()
	return uuo
}

// RemoveErrorresultIDs removes the "errorresult" edge to ErrorResult entities by IDs.
func (uuo *URLUpdateOne) RemoveErrorresultIDs(ids ...int) *URLUpdateOne {
	uuo.mutation.RemoveErrorresultIDs(ids...)
	return uuo
}

// RemoveErrorresult removes "errorresult" edges to ErrorResult entities.
func (uuo *URLUpdateOne) RemoveErrorresult(e ...*ErrorResult) *URLUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveErrorresultIDs(ids...)
}

// ClearStat clears all "stat" edges to the Stat entity.
func (uuo *URLUpdateOne) ClearStat() *URLUpdateOne {
	uuo.mutation.ClearStat()
	return uuo
}

// RemoveStatIDs removes the "stat" edge to Stat entities by IDs.
func (uuo *URLUpdateOne) RemoveStatIDs(ids ...int) *URLUpdateOne {
	uuo.mutation.RemoveStatIDs(ids...)
	return uuo
}

// RemoveStat removes "stat" edges to Stat entities.
func (uuo *URLUpdateOne) RemoveStat(s ...*Stat) *URLUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStatIDs(ids...)
}

// Where appends a list predicates to the URLUpdate builder.
func (uuo *URLUpdateOne) Where(ps ...predicate.Url) *URLUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *URLUpdateOne) Select(field string, fields ...string) *URLUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Url entity.
func (uuo *URLUpdateOne) Save(ctx context.Context) (*Url, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *URLUpdateOne) SaveX(ctx context.Context) *Url {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *URLUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *URLUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *URLUpdateOne) check() error {
	if v, ok := uuo.mutation.Status(); ok {
		if err := enturl.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Url.status": %w`, err)}
		}
	}
	return nil
}

func (uuo *URLUpdateOne) sqlSave(ctx context.Context) (_node *Url, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enturl.Table, enturl.Columns, sqlgraph.NewFieldSpec(enturl.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Url.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enturl.FieldID)
		for _, f := range fields {
			if !enturl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enturl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.URL(); ok {
		_spec.SetField(enturl.FieldURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(enturl.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.RelativePath(); ok {
		_spec.SetField(enturl.FieldRelativePath, field.TypeString, value)
	}
	if uuo.mutation.RelativePathCleared() {
		_spec.ClearField(enturl.FieldRelativePath, field.TypeString)
	}
	if uuo.mutation.ErrorresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedErrorresultIDs(); len(nodes) > 0 && !uuo.mutation.ErrorresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ErrorresultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.ErrorresultTable,
			Columns: []string{enturl.ErrorresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(errorresult.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStatIDs(); len(nodes) > 0 && !uuo.mutation.StatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enturl.StatTable,
			Columns: []string{enturl.StatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Url{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enturl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
